# Generated by Django 2.2.6 on 2019-12-13 12:41

from django.db import migrations
import json
import os
from minerals.models import Mineral


#Open file, parse, and store as dictionary:
def mineral_loader(apps, schema_editor):

    THIS_FOLDER = os.path.dirname(os.path.abspath(__file__))
    my_file = os.path.join(THIS_FOLDER, 'minerals.json')
    minerals = json.loads(open(my_file).read())
    for mineral in minerals:
        print("about to add: " + mineral['name'])

        #todo: make the below more efficient...This was just the first solution I thought of with all the try/catch blocks to weed out the empty values
        try:
            name = mineral['name']
        except:
            name = ""

        try:
            image_filename = mineral['name']
        except:
            image_filename = ""

        try:
            image_caption = mineral['image_caption']
        except:
            image_caption = ""

        try:
            category = mineral['category']
        except:
            category = ""

        try:
            formula = mineral['formula']
        except:
            formula = ""

        try:
            strunz_classification = mineral['strunz_classification']
        except:
            strunz_classification = ""

        try:
            crystal_system = mineral['crystal_system']
        except:
            crystal_system = ""

        try:
            unit_cell = mineral['unit_cell']
        except:
            unit_cell = ""

        try:
            color = mineral['color']
        except:
            color = ""

        try:
            crystal_symmetry = mineral['crystal_symmetry']
        except:
            crystal_symmetry = ""

        try:
            cleavage = mineral['cleavage']
        except:
            cleavage = ""

        try:
            mohs_scale_hardness = mineral['mohs_scale_hardness']
        except:
            mohs_scale_hardness = ""

        try:
            luster = mineral['luster']
        except:
            luster = ""

        try:
            streak = mineral['streak']
        except:
            streak = ""

        try:
            diaphaneity = mineral['diaphaneity']
        except:
            diaphaneity = ""

        try:
            optical_properties = mineral['optical_properties']
        except:
            optical_properties = ""

        try:
            group = mineral['group']
        except:
            group = ""

        try:
            refractive_index = mineral['refractive_index']
        except:
            refractive_index = ""

        try:
            crystal_habit = mineral['crystal_habit']
        except:
            crystal_habit = ""

        try:
            specific_gravity = mineral['specific_gravity']
        except:
            specific_gravity = ""


        minEntry = Mineral(name=name,
                           image_filename=image_filename,
                           image_caption=image_caption,
                           category=category,
                           formula=formula,
                           strunz_classification=strunz_classification,
                           crystal_system=crystal_system,
                           unit_cell=unit_cell,
                           color=color,
                           crystal_symmetry=crystal_symmetry,
                           cleavage=cleavage,
                           mohs_scale_hardness=mohs_scale_hardness,
                           luster=luster,
                           streak=streak,
                           diaphaneity=diaphaneity,
                           optical_properties=optical_properties,
                           group=group,
                           refractive_index=refractive_index,
                           specific_gravity=specific_gravity,
                           crystal_habit =crystal_habit
                           ).save()


class Migration(migrations.Migration):

    dependencies = [
        ('minerals', '0002_bentestmodel'),
    ]

    operations = [
        migrations.RunPython(mineral_loader),

    ]